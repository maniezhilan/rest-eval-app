{
  "name": "angularjs-toaster",
  "version": "2.0.0",
  "description": "AngularJS Toaster is a customized version of toastr non-blocking notification javascript library",
  "author": {
    "name": "Jiri Kavulak"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/jirikavi/AngularJS-Toaster.git"
  },
  "dependencies": {},
  "devDependencies": {
    "angular": ">1.2.6",
    "angular-animate": "~1.2.8",
    "angular-mocks": "^1.4.7",
    "jasmine-core": "^2.3.4",
    "karma": "^0.13.21",
    "karma-chrome-launcher": "^0.2.2",
    "karma-coverage": "^0.5.3",
    "karma-jasmine": "^0.3.7",
    "coveralls": "^2.11.6"
  },
  "jspm": {
    "main": "toaster",
    "dependencies": {
      "css": "jspm:css@*"
    },
    "shim": {
      "toaster": {
        "deps": [
          "./toaster.css!"
        ]
      }
    }
  },
  "readme": "AngularJS-Toaster\r\n=================\r\n\r\n**AngularJS Toaster** is an AngularJS port of the **toastr** non-blocking notification jQuery library. It requires AngularJS v1.2.6 or higher and angular-animate for the CSS3 transformations.\r\n\r\n[![Build Status](https://travis-ci.org/jirikavi/AngularJS-Toaster.svg)](https://travis-ci.org/jirikavi/AngularJS-Toaster)\r\n[![Coverage Status](https://coveralls.io/repos/jirikavi/AngularJS-Toaster/badge.svg?branch=master&service=github&busted=1)](https://coveralls.io/github/jirikavi/AngularJS-Toaster?branch=master)\r\n\r\n### Current Version 2.0.0\r\n\r\n## Angular Compatibility\r\nAngularJS-Toaster requires AngularJS v1.2.6 or higher and specifically targets AngularJS, not Angular 2, although it could be used via ngUpgrade.  \r\nIf you are looking for the Angular 2 port of AngularJS-Toaster, it is located [here](https://github.com/Stabzs/Angular2-Toaster).\r\n\r\n## Demo\r\n- Simple demo is at http://plnkr.co/edit/HKTC1a\r\n- Older versions are http://plnkr.co/edit/1poa9A or http://plnkr.co/edit/4qpHwp or http://plnkr.co/edit/lzYaZt (with version 0.4.5)\r\n- Older version with Angular 1.2.0 is placed at http://plnkr.co/edit/mejR4h\r\n- Older version with Angular 1.2.0-rc.2 is placed at http://plnkr.co/edit/iaC2NY\r\n- Older version with Angular 1.1.5 is placed at http://plnkr.co/mVR4P4\r\n\r\n## Getting started\r\n\r\nOptionally: to install with bower, use:\r\n```\r\nbower install --save angularjs-toaster\r\n```\r\nor with npm :\r\n```\r\nnpm install --save angularjs-toaster\r\n```\r\n* Link scripts:\r\n\r\n```html\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/angularjs-toaster/1.1.0/toaster.min.css\" rel=\"stylesheet\" />\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js\" ></script>\r\n<script src=\"https://code.angularjs.org/1.2.0/angular-animate.min.js\" ></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/angularjs-toaster/1.1.0/toaster.min.js\"></script>\r\n```\r\n\r\n* Add toaster container directive: \r\n\r\n```html\r\n<toaster-container></toaster-container>\r\n```\r\n\r\n* Prepare the call of toaster method:\r\n\r\n```js\r\n// Display an info toast with no title\r\nangular.module('main', ['toaster', 'ngAnimate'])\r\n\t.controller('myController', function($scope, toaster) {\r\n\t    $scope.pop = function(){\r\n\t        toaster.pop('success', \"title\", \"text\");\r\n\t    };\r\n\t});\r\n```\r\n\r\n* Call controller method on button click:\r\n\r\n```html\r\n<div ng-controller=\"myController\">\r\n    <button ng-click=\"pop()\">Show a Toaster</button>\r\n</div>\r\n```\r\n\r\n### Timeout\r\nBy default, toasts have a timeout setting of 5000, meaning that they are removed after 5000 \r\nmilliseconds.  \r\n\r\nIf the timeout is set to anything other than a number greater than 0, the toast will be considered\r\n \"sticky\" and will not automatically dismiss.\r\n\r\nThe timeout can be configured at three different levels:\r\n\r\n* Globally in the config for all toast types:\r\n```html\r\n<toaster-container toaster-options=\"{'time-out': 1000}\"></toaster-container>\r\n```\r\n\r\n* Per info-class type:\r\nBy passing the time-out configuration as an object instead of a number, you can specify the global behavior an info-class type should have.\r\n```html\r\n<toaster-container toaster-options=\"\r\n    {'time-out':{ 'toast-warning': 10, 'toast-error': 0 } }\">\r\n</toaster-container>\r\n```\r\nIf a type is not defined and specified, a timeout will not be applied, making the toast \"sticky\".\r\n\r\n* Per toast constructed via toaster.pop('success', \"title\", \"text\"):\r\n```html\r\ntoaster.pop({\r\n                type: 'error',\r\n                title: 'Title text',\r\n                body: 'Body text',\r\n                timeout: 3000\r\n            });\r\n```\r\n\r\n### Close Button\r\n\r\nThe Close Button's visibility can be configured at three different levels:\r\n\r\n* Globally in the config for all toast types:\r\n```html\r\n<toaster-container toaster-options=\"{'close-button': true}\"></toaster-container>\r\n```\r\n\r\n* Per info-class type:\r\nBy passing the close-button configuration as an object instead of a boolean, you can specify the global behavior an info-class type should have.\r\n```html\r\n<toaster-container toaster-options=\"\r\n    {'close-button':{ 'toast-warning': true, 'toast-error': false } }\">\r\n</toaster-container>\r\n```\r\nIf a type is not defined and specified, the default behavior for that type is false.\r\n\r\n* Per toast constructed via toaster.pop('success', \"title\", \"text\"):\r\n```html\r\ntoaster.pop({\r\n                type: 'error',\r\n                title: 'Title text',\r\n                body: 'Body text',\r\n                showCloseButton: true\r\n            });\r\n```\r\nThis option is given the most weight and will override the global configurations for that toast.  However, it will not persist to other toasts of that type and does not alter or pollute the global configuration.\r\n\r\n### Close Html\r\n\r\nThe close button html can be overridden either globally or per toast call.\r\n\r\n - Globally:\r\n\r\n    ```html\r\n    <toaster-container toaster-options=\"{'close-html':'<button>Close</button>', \r\n        'showCloseButton':true}\"></toaster-container>\r\n    ```\r\n - Per toast:\r\n\r\n    ```js\r\n    toaster.pop({\r\n            type: 'error',\r\n            title: 'Title text',\r\n            body: 'Body text',\r\n            showCloseButton: true,\r\n            closeHtml: '<button>Close</button>'\r\n    });\r\n    ```\r\n\r\n\r\n### Body Output Type\r\nThe rendering of the body content is configurable at both the Global level, which applies to all toasts, and the individual toast level when passed as an argument to the toast.\r\n\r\nThere are four types of body renderings: trustedHtml', 'template', 'templateWithData', 'directive'.\r\n\r\n - trustedHtml:  When using this configuration, the toast will parse the body content using \r\n\t`$sce.trustAsHtml(toast.body)`.\r\n\tIf the html can be successfully parsed, it will be bound to the toast via `ng-bind-html`.  If it cannot be parsed as \"trustable\" html, an exception will be thrown.\t\r\n\r\n - template:  Will use the `toast.body` if passed as an argument, else it will fallback to the template bound to the `'body-template': 'toasterBodyTmpl.html'` configuration option.\r\n \r\n - templateWithData: \r\n\t - Will use the `toast.body` if passed as an argument, else it will fallback to the template bound to the `'body-template': 'toasterBodyTmpl.html'` configuration option.\r\n\t - Assigns any data associated with the template to the toast.\r\n\r\n - directive \r\n\t - Will use the `toast.body` argument to represent the name of a directive that you want to render as the toast's body, else it will fallback to the template bound to the `'body-template': 'toasterBodyTmpl.html'` configuration option.\r\n    The directive name being passed to the `body` argument should appear as it exists in the markup, \r\n     not camelCased as it would appear in the directive declaration (`cool-directive-name` instead of `coolDirectiveName`). The directive must be usable as an attribute.\r\n    \r\n      ```js\r\n    // The toast pop call, passing in a directive name to be rendered\r\n    toaster.pop({\r\n\t\t    type: 'info',\r\n\t\t    body: 'bind-unsafe-html',\r\n\t\t    bodyOutputType: 'directive'\r\n\t});\r\n      ```\r\n    \r\n      ```js\r\n    // The directive that will be dynamically rendered\r\n    .directive('bindUnsafeHtml', [function () {\r\n            return {\r\n                template: \"<span style='color:orange'>Orange directive text!</span>\"\r\n            };\r\n    }])\r\n    ```\r\n     - Will use the `toast.directiveData` argument to accept data that will be bound to the directive's scope. The directive cannot use isolateScope and will\r\n     throw an exception if isolateScope is detected.  All data must be passed via the directiveData argument.\r\n    \r\n        ```js\r\n      // The toast pop call, passing in a directive name to be rendered\r\n      toaster.pop({\r\n              type: 'info',\r\n              body: 'bind-name',\r\n              bodyOutputType: 'directive',\r\n              directiveData: { name: 'Bob' }\r\n      });\r\n        ```\r\n        \r\n        ```js\r\n      // The directive that will be dynamically rendered\r\n      .directive('bindName', [function () {\r\n            return {\r\n                template: \"<span style='color:orange'>Hi {{directiveData.name}}!</span>\"\r\n            };\r\n      }])\r\n        ```\r\n        \r\n    There are additional documented use cases in these [tests](test/directiveTemplateSpec.js).\r\n    \r\nAll four options can be configured either globally for all toasts or individually per toast.pop() call.  If the `body-output-type` option is configured on the toast, it will take precedence over the global configuration for that toast instance.\r\n\r\n - Globally:\r\n \r\n    ```html\r\n    <toaster-container toaster-options=\"{'body-output-type': 'template'}\"></toaster-container>\r\n    ```\r\n \r\n - Per toast:\r\n \r\n    ```js\r\n    toaster.pop({\r\n            type: 'error',\r\n            title: 'Title text',\r\n            body: 'Body text',\r\n            bodyOutputType: 'trustedHtml'\r\n    });\r\n    ```\r\n\r\n### On Show Callback\r\nAn onShow callback function can be attached to each toast instance.  The callback will be invoked upon toast add.\r\n\r\n```js\r\ntoaster.pop({\r\n            title: 'A toast',\r\n\t\t    body: 'with an onShow callback',\r\n\t\t\tonShowCallback: function () { \r\n\t\t\t    toaster.pop({\r\n\t\t\t        title: 'A toast',\r\n\t\t\t\t    body: 'invoked as an onShow callback'\r\n\t\t\t\t});\r\n\t\t\t}\r\n});\r\n```\r\n\r\n### On Hide Callback\r\nAn onHide callback function can be attached to each toast instance.  The callback will be invoked upon toast removal.  This can be used to chain toast calls.\r\n\r\n```js\r\ntoaster.pop({\r\n            title: 'A toast',\r\n\t\t    body: 'with an onHide callback',\r\n\t\t\tonHideCallback: function () { \r\n\t\t\t    toaster.pop({\r\n\t\t\t        title: 'A toast',\r\n\t\t\t\t    body: 'invoked as an onHide callback'\r\n\t\t\t\t});\r\n\t\t\t}\r\n});\r\n```\r\n\r\n### Multiple Toaster Containers\r\nIf desired, you can include multiple `<toaster-container></toaster-container>` \r\nelements in your DOM.  The library will register an event handler for every instance \r\nof the container that it identifies.  By default, when there are multiple registered \r\ncontainers, each container will receive a toast notification and display it when a toast \r\nis popped.  \r\n\r\nTo target a specific container, you need to register that container with a unique `toaster-id`.\r\n\r\n```html\r\n<toaster-container toaster-options=\"{'toaster-id': 1, \r\n    'animation-class': 'toast-top-left'}\"></toaster-container>\r\n<toaster-container toaster-options=\"{'toaster-id': 2}\"></toaster-container>\r\n```\r\n\r\nThis gives you the ability to specifically target a unique container rather than broadcasting \r\nnew toast events to any containers that are currently registered.\r\n\r\n```js\r\nvm.popContainerOne = function () {\r\n    toaster.pop({ type: 'info', body: 'One', toasterId: 1 });\r\n}\r\n      \r\nvm.popContainerTwo = function () {\r\n    toaster.pop({ type: 'info', body: 'Two', toasterId: 2 });\r\n}\r\n```\r\n\r\n[This plnkr](http://plnkr.co/edit/4ICtcrpTSoAB9Vo5bRvN?p=preview) demonstrates this behavior \r\nand it is documented in these [tests](test/toasterContainerSpec.js#L430).\r\n\r\n\r\n### Limit\r\nLimit is defaulted to 0, meaning that there is no maximum number of toasts that are defined \r\nbefore the toast container begins removing toasts when a new toast is added.\r\n\r\nTo change this behavior, pass a \"limit\" option to the toast-container configuration:\r\n\r\n```html\r\n<toaster-container toaster-options=\"{'limit':5}\"></toaster-container>\r\n```\r\n\r\n### Dismiss on tap\r\nBy default, the `tap-to-dismiss` option is set to true, meaning that if a toast is clicked anywhere \r\non the toast body, the toast will be dismissed.  This behavior can be overriden in the toast-container \r\nconfiguration so that if set to false, the toast will only be dismissed if the close button is defined \r\nand clicked:\r\n\r\n```html\r\n<toaster-container toaster-options=\"{'tap-to-dismiss':false}\"></toaster-container>\r\n```\r\n\r\n### Newest Toasts on Top\r\nThe `newest-on-top` option is defaulted to true, adding new toasts on top of other existing toasts. \r\nIf changed to false via the toaster-container configuration, toasts will be added to the bottom of \r\nother existing toasts.\r\n\r\n```html\r\n<toaster-container toaster-options=\"{'newest-on-top':false}\"></toaster-container>\r\n```\r\n\r\n### Other Options\r\n\r\n```html\r\n// Change display position\r\n<toaster-container toaster-options=\"{'position-class': 'toast-top-full-width'}\"></toaster-container>\r\n```\r\n\r\n### Animations\r\nUnlike toastr, this library relies on ngAnimate and CSS3 transformations for optional animations.  To include and use animations, add a reference to angular-animate.min.js (as described in Getting started - Link scripts) and add ngAnimate as a dependency alongside toaster. \r\n\r\n```js\r\n// Inject ngAnimate to enable animations\r\nangular.module('main', ['toaster', 'ngAnimate']);\r\n```\r\nIf you do not want to use animations, you can safely remove the angular-animate.min.js reference as well as the injection of ngAnimate.  Toasts will be displayed without animations.\r\n\r\n\r\n### Common Issues\r\n- Toaster always shows up as \"info\"\r\n    - Your `<toaster-container></toaster-container` might be placed inside of your routing directive.\r\n    - You have multiple `<toaster-container></toaster-container` elements without unique `toaster-id` configuration arguments.\r\n- [$sce:itype] Attempted to trust a non-string value in a content requiring a string \r\n    - You have not specified: `bodyOutputType: 'trustedHtml'` when passing html as a body argument.\r\n- My toasts do not show up when I pop them, but after I perform another action.\r\n    - You are calling `toaster.pop()` outside of AngularJS scope and a digest cycle is not being triggered.\r\n    Wrap your `toaster.pop()` call in `$timeout` to force a digest cycle.\r\n    ```js\r\n     $timeout(function () {\r\n        toaster.pop();\r\n     }, 0);\r\n    ```\r\n\t\t\r\n## Author\r\n**Jiri Kavulak**\r\n\r\n## Credits\r\nInspired by http://codeseven.github.io/toastr/demo.html.\r\n\r\n## Copyright\r\nCopyright © 2013-2016 [Jiri Kavulak](https://twitter.com/jirikavi).\r\n\r\n## License \r\nAngularJS-Toaster is under MIT license - http://www.opensource.org/licenses/mit-license.php",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jirikavi/AngularJS-Toaster/issues"
  },
  "_id": "angularjs-toaster@2.0.0",
  "dist": {
    "shasum": "0370b685a8ef2674058f8657f65acea494fe830f"
  },
  "_from": "angularjs-toaster@2.0.0",
  "_resolved": "https://registry.npmjs.org/angularjs-toaster/-/angularjs-toaster-2.0.0.tgz"
}
